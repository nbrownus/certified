#!/bin/sh

#/ Usage: certified-ca [--bits=<bits>] [--crl-url=<crl-url>] [--days=<days>] [--db=<db>] [--encrypt-intermediate] [--intermediate-password=<intermediate-password>] [--ocsp-url=<ocsp-url>] [--revoke] [--root-crl-url=<root-crl-url>] [--root-password=<root-password>] C=<country> ST=<state> L=<locality> O=<organization> CN=<common-name>
#/   --bits=<bits>                                   bits to use for the private key (defaults to 2048)
#/   --crl-url=<crl-url>                             CRL distribution URL for the intermediate CA
#/   --days=<days>                                   days until the certificate expires (defaults to 3650)
#/   --db=<db>                                       OpenSSL database directory (defaults to etc/ssl)
#/   --encrypt-intermediate                          encrypt the intermediate CA private key (with <intermediate-password>, if given)
#/   --intermediate-password=<intermediate-password> password for the intermediate CA private key (implies --encrypt-intermediate)
#/   --ocsp-url=<ocsp-url>                           OCSP responder URL
#/   --root-password=<root-password>                 password for the root CA private key
#/   --revoke                                        revoke an intermediate CA certificate
#/   --root-crl-url=<root-crl-url>                   CRL distribution URL for the root CA
#/   --pathlen=<sub CAs>                             Number of children CAs that can be issued under this CA, -1 to disable, default 1
#/   C=<country>                                     certificate country
#/   ST=<state>                                      certificate state (optional)
#/   L=<locality>                                    certificate locality (usually a city)
#/   O=<organization>                                certificate organization (usually a company)
#/   CN=<common-name>                                certificate common name (usually a domain name or Company CA)

set -e

. "$(dirname "$(dirname "$0")")/lib/certified.sh"

while [ "$#" -gt 0 ]
do
    case "$1" in
        --bits) BITS="$2" shift 2;;
        --bits=*) BITS="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        --crl-url) CRL_URL="$2" shift 2;;
        --crl-url=*) CRL_URL="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        --days) DAYS="$2" shift 2;;
        --days=*) DAYS="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        --db) DB="$2" shift 2;;
        --db=*) DB="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        --encrypt-intermediate) ENCRYPT="--encrypt" shift;;
        --intermediate-password) INTERMEDIATE_PASSWORD="$2" shift 2;;
        --intermediate-password=*) INTERMEDIATE_PASSWORD="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        --ocsp-url) OCSP_URL="$2" shift 2;;
        --ocsp-url=*) OCSP_URL="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        --pathlen) PATHLEN="$2" shift 2;;
        --pathlen=*) PATHLEN="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        --revoke) REVOKE="--revoke" shift;;
        --root-crl-url) ROOT_CRL_URL="$2" shift 2;;
        --root-crl-url=*) ROOT_CRL_URL="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        --root-password) ROOT_PASSWORD="$2" shift 2;;
        --root-password=*) ROOT_PASSWORD="$(echo "$1" | cut -d"=" -f"2-")" shift;;
		-h|--help) usage 0;;
		-*) usage 1;;
        C=*) C="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        CN=*) CN="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        L=*) L="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        O=*) O="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        ST=*) ST="$(echo "$1" | cut -d"=" -f"2-")" shift;;
		*) usage 1;;
    esac
done
if [ -f "$DB/defaults.sh" ]
then . "$DB/defaults.sh"
fi
[ "$C" -a "$L" -a "$O" -a "$CN" -o "$REVOKE" ] || usage 1

mkdir -p "$DB/certs" "$DB/private"
cd "$DB"

if [ "$REVOKE" ]
then
    certified-revoke --ca-password="$ROOT_PASSWORD" --db="." --issuer="root-ca" --issuer-name="root-ca" --name="intermediate-ca" CN="intermediate-ca"
    git rm -q "certs/intermediate-ca.crt" "intermediate-ca.csr" "private/intermediate-ca.key"
    git add "."
    git commit -m"$MESSAGE" -q
    exit
fi

if [ -f "certs/intermediate-ca.crt" ]
then die "CA already exists in $DB"
fi
if [ -f "private/intermediate-ca.key" ]
then die "CA already partially exists in $DB"
fi
if [ -f "private/root-ca.key" -o -f "certs/root-ca.crt" ]
then log "root CA already exists in $DB; generating intermediate CA"
fi

touch "root-ca.db" "root-ca.db.attr"
if [ ! -f "root-ca.db.serial" ]
then echo "01" >"root-ca.db.serial"
fi

if [ -z "$PATHLEN" ]
then PATHLEN="1"
fi
if [ "$PATHLEN" != "-1" ]
then PATHLEN_STR=", pathlen:$PATHLEN"
fi

{
    cat <<EOF
: \${BITS:="$BITS"}
: \${CRL_URL:="$CRL_URL"}
: \${DAYS:="$DAYS"}
: \${OCSP_URL:="$OCSP_URL"}
: \${ROOT_CRL_URL:="$ROOT_CRL_URL"}

EOF
    if_echo "$C" ": \${C:=\"$C\"}"
    if_echo "$ST" ": \${ST:=\"$ST\"}"
    if_echo "$L" ": \${L:=\"$L\"}"
    if_echo "$O" ": \${O:=\"$O\"}"
} >"defaults.sh"

if [ "$BITS" -lt 4096 ]
then
    log "generating 4096 bit keys for the CA but defaulting to $BITS for other certificates"
    BITS=4096
fi
if [ "$DAYS" -lt 3650 ]
then
    log "the CA certificates will expire in 3650 days instead of $DAYS"
    DAYS=3650
fi

{
    cat <<EOF
[dn]
EOF
    if_echo "$C" "C = $C"
    if_echo "$ST" "ST = $ST"
    if_echo "$L" "L = $L"
    if_echo "$O" "O = $O"
    cat <<EOF
CN = $CN Root

[req]
default_bits = $BITS
default_md = sha256
distinguished_name = dn
prompt = no

[x509_extensions]
EOF
    echo "basicConstraints = critical, CA:TRUE $PATHLEN_STR"
    cat <<EOF
keyUsage = critical, cRLSign, keyCertSign, nonRepudiation
subjectKeyIdentifier = hash
EOF
} >"intermediate-ca.cnf"

if [ ! -f "certs/root-ca.crt" ]
then
    if [ "$ROOT_PASSWORD" ]
    then
        if [ "$ROOT_PASSWORD" = "-" ]
        then read ROOT_PASSWORD
        fi
        PASSIN="pass:$ROOT_PASSWORD" PASSOUT="pass:$ROOT_PASSWORD"
        log "generating RSA private key"
        openssl genrsa -des3 -out "private/root-ca.key" -passout "$PASSOUT" "$BITS"
        log "signing the CA certificate"
        openssl req -config "intermediate-ca.cnf" -days "$DAYS" -extensions "x509_extensions" -key "private/root-ca.key" -new -out "certs/root-ca.crt" -passin "$PASSIN" -x509
    else
        log "generating RSA private key; please choose and confirm a root CA password"
        openssl genrsa -des3 -out "private/root-ca.key" "$BITS"
        log "signing the CA certificate; please enter the root CA password"
        openssl req -config "intermediate-ca.cnf" -days "$DAYS" -extensions "x509_extensions" -key "private/root-ca.key" -new -out "certs/root-ca.crt" -x509
    fi
fi

certified-csr --bits="$BITS" --ca --crl-url="$ROOT_CRL_URL" --days="$DAYS" --db="." $ENCRYPT --issuer="$CN Root" --issuer-name="root-ca" --name="intermediate-ca" --ocsp-url="$OCSP_URL" --password="$INTERMEDIATE_PASSWORD" C="$C" CN="$CN Intermediate" L="$L" O="$O" ST="$ST"
certified-crt --ca-password="$ROOT_PASSWORD" --days="$DAYS" --db="." --name="intermediate-ca" CN="$CN Intermediate"

git init -q
echo "private/root-ca.key" >".gitignore"
git add "."
git commit -m"$MESSAGE" -q

echo >&2
log "install this certificate on your laptops and servers"
cat "certs/root-ca.crt"
echo >&2
log "store $PWD/private/root-ca.key in a very safe place and remove it from here"

